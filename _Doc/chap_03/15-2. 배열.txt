==========================================================
15-2. 배열..
==========================================================
	
 	--------------
 	-	배열의 생성..
	--------------
	
		---------
		-	방법..
		---------
		
			1)	값 목록을 이용..
			
			2)	new 연산자를 이용..
			
			
		----------------
		1)	값 목록을 이용..
		----------------
		
			-	타입[] 변수 = { 값0, 값1, 값2, ... };
			
				ㄴ	중괄호는 주어진 값들을 항목으로 가지는
					배열 객체를 힙에 할당 받고
					할당된 메모리의 주소를 반환..
					
				ㄴ	배열 변수는 반환된 주소를 이용하여
					배열 객체를 참조..
				
									|
				-------------		|			------------------------	
				| 변수 = 0x05 |	----|------>	| 값0 | 값1 | 값2 | ...	
				-------------		|			------------------------
									|			0x05
									|
				--------------------------------------------------------					
				
				스택 영역..						힙 영역..
				
				
				예)	String[] names = { "홍길동", "유재석", "강호동" };
				
					
					
			-	배열 변수를 이미 선언한 후에는
				다른 실행문에서 중괄호를 사용한 배열 생성이
				허용되지 않음..
				
				예)	int [] scores;
					scores = { 100, 80, 90, 70 };	-	( X )
					
					
				ㄴ	값 목록들이 나중에 결정되는 상황이라면
					new 연산자를 사용..
					
					예)	int [] scores;
						scores = new int[] { 100, 80, 90, 70 };
						
						
				ㄴ	메소드의 매개 값이 배열인 경우도 동일..
				
					예)	int add( int[] scores ) { ... }
					
						int result = add( {100, 80, 90 } );				-	( X )
						int result = add( new int[]{ 100, 80, 90 } );	-	( O )
					
				
				
				
		-------------------
		2)	new 연산자를 이용..
		-------------------
		
			-	초기화 되지 않아지만
				향후 값들을 저장할 배열을
				미리 만들고자할 때 new 이용..
				
				방식 1)	타입[] 변수
						 = new 타입 [ 길이 ];
									-----
									ㄴ	배열이 관리 가능
										요소의 갯수..
										
				방식 2)	타입[] 변수 = null;
						변수 = new 타입[ 길이 ];
						
						
			-	new 연산자로 배열을 처음 생성하면
				자동적으로 기본값( 0 또는 0과 유사한 값 )으로
				초기화 됨..
						
						
				-	배열의 초기값..
				
				
					========================================
					분류..		|	타입..		|	초기값..
					========================================
					기본 타입..	|	byte[]		|	0
					( 정수 )		|	char[]		|	'\u0000'
						 		|	short[]		|	0
						 		|	int[]		|	0
						 		|	long[]		|	0L
					----------------------------------------
					기본 타입..	|	float[]		|	0.0f
					( 실수 )		|	double[]	|	0.0
					----------------------------------------					
					기본 타입..	|	boolean[]	|	false
					( 논리 )		|				|
					----------------------------------------					
					참조 타입..	|	클래스[]		|	null
								|	인터페이스[]	|	null
					========================================
							
					예)	학생 30명의 점수를 저장할 배열..
					
						int [] scores = new int [ 30 ];
										
						
												|
						-----------------		|			------------------------	
						| scores = 0x05 |	----|------>	| 0 | 0 | 0 | ...	
						-----------------		|			------------------------
												|			0x05
												|
						--------------------------------------------------------					
						
						스택 영역..						힙 영역..
						
								
						String[] names = new String[30];
									
			
			
												|
						----------------		|			---------------------------------	
						| names = 0x05 |	----|------>	| null | null | null | ...	
						----------------		|			---------------------------------
												|			0x05
												|
						--------------------------------------------------------					
						
						스택 영역..						힙 영역..
			
			
			-	배열 생성 후 특정 인덱스 위치에
				새로운 값을 저장하려면
				대입 연산자를 사용..
				
				변수[ 인덱스 ] = 값;
				
				예)	int[] scores = new int[3];
					scores[ 0 ] = 100;
					scores[ 1 ] = 90;
					scores[ 2 ] = 80;
		
			
 	--------------
 	-	배열의 길이..
	--------------
	
		-	배열의 길이..
		
			-	배열에 저장 가능한 전체 항목의 갯수..
			
			-	배열 객체의 [ length ]라는 필드 이용..
									  ---
									  ㄴ	객체 내부의 데이터..
									  ㄴ	[.] 연산자를 이용하여 접근..
									  
				ㄴ	배열 객체.length;
				
					예)	int[] intArr = { 10, 20, 30 };
						int num = intArr.length;
						
						ㄴ	num == 3..
						
				ㄴ	읽기 전용 필드이므로
					값을 바꿀수 없음..
					
					intArr.length = 10;		--->	( X )
					
					
				ㄴ	for문을 사용하여 배열 전체를
					루핑할 때 유용..
					
													
						
==========================================================

	[ 참고 ]

		혼자 공부하는 자바(개정판)
		https://hongong.hanbit.co.kr/%EC%9E%90%EB%B0%94/
		
		자료 구조(Data Structure) 개념 및 종류 정리
		https://bnzn2426.tistory.com/115

==========================================================