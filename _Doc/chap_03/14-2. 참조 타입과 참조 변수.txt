==========================================================
14-2. 참조 타입과 참조 변수..
==========================================================

	------------------
	-	메모리 사용 영역..
	------------------
	
		-------------------
		-	[ JVM ]이 사용하는
			메모리 영역..
		-------------------

			--------------
			-	메소드 영역..
			--------------
			
				-	[ JVM ]이 시작할 때 생성..
				
				-	모든 스레드가 공유하는 영역..
				
				-	코드에서 사용되는 클래스들을 읽어와서
					클래스별로 정적 필드, 상수, 메소드 코드,
					생성자 코드등을 분류해서 저장..
					
								
			----------
			-	힙영역..
			----------
			
				-	객체와 배열이 생성되는 영역..
					ㄴ	JVM 스택 영역의 변수나
						다른 객체의 필드들의 참조 대상..
						
				-	참조하는 변수나 필드가 없는 경우
					의미 없는 객체가 됨..
					
					ㄴ	JVM은 이것들을 쓰레기로
								( Garbage ) 
						취급하여 쓰레기 수집기의
							( Garbage collector )
						수집 대상이 됨..
						
					ㄴ	개발자는 객체를 제거하기 위해
						별도의 코드를 작성할 필요가 없음..
						
						ㄴ	자바는 코드로 객체를 직접 제거하는
							방법을 제공하지 않음..
			
			
			----------------
			-	JVM 스택 영역..
			----------------
			
				-	메소드를 호출할 때마다 프레임을
					추가하고 메소드가 종료되면
					해당 프레임을 제거..
					
					ㄴ	프레임 내부에는 로컬 변수의
						스택이 있으며 기본 / 참조 타입의
						변수가 추가되거나 제거됨..
						
				-	스택 영역에 변수가 생성되는 시점..
					ㄴ	초기화 되는 시점..
						ㄴ	최초로 변수에 값이 저장되는 시점..
				
				-	변수는 선언된 블록 안에서만
					스택에 존재하고 블록을 벗어나면
					스택에서 제거됨..
					
					예)	char v1 = 'A';			--	(1)
					
						if( v1 == 'A' )			--	(2)
						{						 |
							int v2 = 100;		 |
							double v3 = 3.14;	 |					
						}						--
						
						boolean v4 = true;		--	(3)		
						
						
						(1)				(2)				(3)
						
						스택 영역..		스택 영역..		스택 영역..
						----------		----------		----------
						v1 = 'A'		v3 = 3.14		v4 = true
										v2 = 100		v1 = 'A'
										v1 = 'A'
	
	
					
	----------------
	-	참조 변수의
		==, != 연산..
	----------------
	
		-	참조 변수는 메모리의 주소값을 관리..
		
		-	==..
		
			ㄴ	참조하고 있는 주소가 같은지 비교..
				
			ㄴ	동일한 객체를 가르키고 있는지 비교..
			
			예)	var1	----------->	|-----------|
										|	객체1		|
				var2	----------->	|-----------|
				
				var3	----------->	|-----------|
										|	객체2		|
										|-----------|
				
				var1 == var2 	-->	true
				
				var1 != var3	-->	true
				
				var2 == var3 	-->	false
				
				
			
	--------------------------
	-	null 과
		NullPointerException..
	--------------------------
	
		-	null..
		
			ㄴ	참조 타입의 변수가 힙 영역의 객체를
				참조 하지 않는다는 의미..
				
		-	예외..
		
			ㄴ	프로그램 실행 도중에 발생하는 오류..
			
			ㄴ	사용자의 잘못된 입력,
				잘못 작성된 코드 등이 원인..
				
				
		-	NullPointerException..
		
			ㄴ	참조 타입 변수를 잘못 사용하면 발생하는 예외..
			
			ㄴ	참조 변수가 null을 저장하고 있는 경우
				즉, 참조하고 있는 객체가 없으므로
				참조 변수를 통해 작업할 대상이 없음..
				
				예)	int[] intArr = null;
					intArr[0] = 10;	<-----	NullPointerException 발생!!
				


	----------------
	-	String 타입..
	----------------
	
		------------
		-	String..
		------------
				
			ㄴ	문자열을 관리하는 타입..
			
			
			
		------------	
		-	할당 방식..
		------------
				
			1)	String name = "홍길동";
					
				ㄴ	"홍길동"이라는 문자열을
					직접 String 변수 name에 
					저장하는 것이 아님..
					
				ㄴ	"홍길동"은 String 객체로 생성되고
					name은 생성된 객체를 참조..
				
				===============================================
										|	
										|		  ----------
					----------------	|	0x200 | "홍길동" |
					| name = 0x200 |	|		  ----------
					----------------	|													
										|
				===============================================
										|
						스택 영역..		|	힙 영역..
					
					
			2)	String name1 = "홍길동"
				String name2 = "홍길동"
				
				ㄴ	자바는 문자열 상수가 동일하다면
					String 객체를 공유하도록 설계..
					
				ㄴ	name1과 name2가 동일한 문자열인
					"홍길동"을 참조할 경우,
					name1과 name2는
					동일한 String 객체를 참조..
		
				===============================================
										|	
										|		  ----------
					-----------------	|	0x200 | "홍길동" |
					| name1 = 0x200 |	|		  ----------
					-----------------	|													
										|
					-----------------	|
					| name2 = 0x200 |	|
					-----------------	|
				===============================================
										|
						스택 영역..		|	힙 영역..
		
		
		
			3)	변수에 문자열을 저장할 경우에
				문자열 리터럴을 사용하지만
				new 연산자를 사용해서 직접
				String 객체를 생성시킬 수도 있음..
				
				ㄴ	new 연산자..
						
					ㄴ	객체 생성 연산자..
				
					ㄴ	힙 영역에 새로운 객체를 만들때 사용..
				
				String name1 = new String("홍길동");
				String name2 = new String("홍길동");
				
				
				===============================================
										|	
										|		  ----------
					-----------------	|	0x200 | "홍길동" |
					| name1 = 0x200 |	|		  ----------
					-----------------	|													
										|
					-----------------	|		  ----------
					| name2 = 0x250 |	|	0x250 | "홍길동" |
					-----------------	|		  ----------
										|
				===============================================
										|
						스택 영역..		|	힙 영역..
		
		
		
		---------
		-	비교..		
		---------
		
			예)	String name1 = "홍길동";
				String name2 = "홍길동";
				String name3 = new String("홍길동");
				
		
				-	==..
			
					ㄴ	참조 타입의 경우 주소를 비교..
				
					ㄴ	name1 == name2	-	true
						name1 == name3	-	false
						
						
				-	bool String.equals( String str );
				
					ㄴ	문자열 자체를 비교..
					
					ㄴ	name1.equals(name2) == true
						name1.equals(name3) == true
					
			
		----------
		-	null..		
		----------
		
			-	String도 참조 타입이므로
				null 할당 가능..
				
				ㄴ	참조하는 객체가 없음..
				
				예)	String hobby = "여행";
					hobby = null;
					
					ㄴ	hobby를 null로 할당하면
						기존에 참조하던 "여행"은 쓰레기 객체가 되어
						가비지 컬렉터에 의해 자동으로 제거됨..
		
		
==========================================================

	[ 참고 ]

		혼자 공부하는 자바(개정판)
		https://hongong.hanbit.co.kr/%EC%9E%90%EB%B0%94/

==========================================================