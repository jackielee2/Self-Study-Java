==========================================================
11-2. 디버깅..
==========================================================

	---------
	-	개요..
	---------
	
		-	디버깅 이란..
		
			ㄴ	모든 소프트웨어에서 소스 코드의 오류
				또는 버그를 찾아서 수정하는 과정..
				
				
		-	유래..
		
			ㄴ	1940년대에 하버드 대학에서 근무했던
				Grace Hopper 제독의 동료 중 한명이
				컴퓨터의 작동을 방해하는 나방을 발견..
				
				
				
	--------------
	-	디버깅 과정..
	--------------
	
		------------
		1)	오류 식별..
		------------
		
			-	개발자, 테스터 및 최종 사용자가
				소프트웨어를 테스트하거나 사용하는 동안
				발견한 버그를 보고..
				
			-	개발자가 버그의 원인이 된
				정확한 코드 줄 또는 코드 모듈을 탐색..
				
			-	경우에 따라 많은 시간이 소요됨..
			

		------------
		2)	오류 분석..
		------------
		
			-	코더가 모든 프로그램 상태 변경 및
				데이터 값을 기록하여 오류를 분석..
				
			-	소프트웨어 기능에 미치는 영향을 기준으로
				버그 수정의 우선 순위를 결정..
				
			-	소프트웨어 팀이 개발 목표와 요구 사항에 따라
				버그 수정 일정을 설정..


		---------------
		3)	수정 및 검증..
		---------------
		
			-	개발자가 버그를 수정하고 테스트를 실행하여
				소프트웨어가 계속 정상적으로 작동하는지 확인..
				
			-	해당 버그가 추후에도 재발 가능한지 확인하기 위해
				새로운 테스트를 작성할 수도 있음..
			
	
	----------------
	-	주요 오류 유형..
	----------------
	
		------------
		1)	구문 오류..
		------------
		
			-	컴퓨터 프로그램에 잘못 입력된
				명령문이 있을 때 발생..
				
			-	오타 또는 철자 오류 등..
			
				예)	int score = 93;	-	O
					int score = 93	-	X
			
						
		------------
		2)	논리 오류..
		------------
		
			-	프로그래머가 컴퓨터 프로그램의
				단계적 프로세스나 알고리즘을
				잘못 입력할 때 발생..
				
			-	연산자 우선순위 착각,
				너무 이른 루프 종료,
				잘못된 if 결과 등..
				
				예)	두 변수 a와 b의
					평균을 구하는 프로그램..
					
						int a = 2;
						int b = 10;
						int c = a + b / 2;	-	X
						
						ㄴ 	int c = (a + b) / 2;	-	O
						
						 
			-	여러 가지 입력/출력 시나리오의 코드를
				단계별로 살펴보면 발견 가능..
			
			
		--------------
		3)	런타임 오류..
		--------------
		
			-	소프트웨어 코드가 실행되는
				컴퓨팅 환경으로 인해 발생..
				
			-	메모리 공간 부족 또는
				스택 오버플로로 인하여 발생..
				( Stack Overflow )
				
				예)	배열에 할당된 크기를 넘어서 접근하는 경우..
					0으로 나누는 경우..
					재귀 호출이 너무 깊은 경우..
					이미 해제된 메모리를 다시 참조하는 경우 등..
					
	
	
	--------------
	-	디버깅 방법
		in 이클립스..
	--------------
	
		1)	확인하고 싶은 코드에
			브레이크 포인트 지정..
			
			ㄴ	좌측 공란에 더블 클릭 or
				[ Ctrl ] + [ Shift ] + [ B ]
				
		
		2)	디버깅 모드로 실행..
		
			ㄴ	[ F11 ]
			
			
		3)	다음 프로세스로 이동..
		
			ㄴ	[ F5 ]
			
				ㄴ	현재 프로세스가 함수라면
					함수 내부 구현부로 이동..
			
					
			ㄴ	[ F6 ]
				ㄴ	현재 코드 라인의
					밑에 줄로 이동.. 
					
					
		4)	디버깅 종료..
		
			ㄴ	[ Ctrl ] + [ F2 ]
			
			
		5)	주요 디버깅 관련 정보 창..
		
			ㄴ	Variables..
			
				ㄴ	현재 진행중인 프로세스와 관련된
					데이터의 정보 표시..
			
			ㄴ	Breakpoints..
			
				ㄴ	등록된 브레이크 포인트들의
					위치 정보 등 표시..

==========================================================

	[ 참고 ]

		[JAVA] 이클립스 디버깅 방법 (단축키)
		https://mmee2.tistory.com/79
		
		이클립스(Eclipse) 폰트 사이즈 변경하기 (설정, 단축키)
		https://hianna.tistory.com/324
		
		디버깅이란 무엇입니까?
		https://aws.amazon.com/ko/what-is/debugging/
		
		오류의 세 가지 종류
		https://blog.naver.com/eludien/221448617790

==========================================================